{"version":3,"file":"static/js/115.9c2c4120.chunk.js","mappings":"wQAKe,SAASA,IACpB,OAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,EAAKF,EAAQG,SAAS,KAAOC,OAAOJ,EAAQK,MAAM,EAAGL,EAAQM,SAAWN,EAiB9E,IAfAO,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAU,mCAAG,oGAEXX,GAAW,GAFA,UAGQY,EAAAA,EAAAA,IAAaP,GAHrB,OAGLQ,EAHK,OAIXf,EAASe,EAAKC,MAJH,gDAMXZ,EAAS,EAAD,IANG,yBAQXF,GAAW,GARA,4EAAH,qDAWhBW,GACH,GAAE,CAACN,KAECR,EACD,OAAO,KAGX,IAAMkB,EAAc,CAChBC,QAAS,gBACTC,gBAAiB,OACjBC,MAAO,QACPC,OAAQ,QACRC,UAAW,MACXC,UAAW,SACXC,MAAO,QAGLC,EAAW1B,EAAM2B,KAAI,gBAAGnB,EAAH,EAAGA,GAAIoB,EAAP,EAAOA,KAAMC,EAAb,EAAaA,UAAyBC,EAAtC,EAAwBC,aAAxB,OACvB,gBAAIC,MAAO,CAAEZ,gBAAiB,OAAQa,YAAa,UAAnD,UACKH,IAAU,gBACPT,MAAM,MACNa,IAAG,0CAAqCJ,GACxCK,IAAKP,KAEPE,IAAU,cAAGE,MAAOd,EAAV,yBACZ,uBAAIU,KACJ,eAAGI,MAAO,CAAEI,SAAU,SAAtB,6BAA6CP,OARmBrB,EAD7C,IAc3B,OACI,iCACI,eAAIwB,MAAO,CAAEK,QAAS,OAAQC,SAAU,OAAQC,UAAW,QAA3D,SAAsEb,IACrExB,IAAW,SAAC,IAAD,IACXE,IAAS,6CAGrB,C","sources":["pages/Cast/Cast.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom'\r\nimport Loader from 'shared/Loader/Loader';\r\nimport { getCastsById } from '../../shared/api/gettingData'\r\n\r\nexport default function Cast() {\r\n    const [casts, setCasts] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const { movieId } = useParams();\r\n    const id = movieId.includes(':') ? Number(movieId.slice(1, movieId.length)) : movieId;\r\n\r\n    useEffect(() => {\r\n        const fetchCasts = async () => {\r\n            try {\r\n                setLoading(true);\r\n                const data = await getCastsById(id)\r\n                setCasts(data.cast)\r\n            } catch (error) {\r\n                setError(error)\r\n            } finally {\r\n                setLoading(false)\r\n            }\r\n        }\r\n        fetchCasts();\r\n    }, [id])\r\n\r\n    if (!casts) {\r\n        return null;\r\n    }\r\n\r\n    const avatarStyle = {\r\n        outline: \"1px solid red\",\r\n        backgroundColor: \"blue\",\r\n        width: \"250px\",\r\n        height: \"375px\",\r\n        marginTop: \"0px\",\r\n        textAlign: \"center\",\r\n        color: \"gold\",\r\n\r\n    }\r\n    const elements = casts.map(({ id, name, character, profile_path: avatar }) => (\r\n        <li style={{ backgroundColor: \"gold\", borderStyle: 'outset' }} key={id}>\r\n            {avatar && <img\r\n                width=\"250\"\r\n                src={`https://image.tmdb.org/t/p/w500/${avatar}`}\r\n                alt={name}\r\n            />}\r\n            {!avatar && <p style={avatarStyle}>No foto ((</p>}\r\n            <p>{name}</p>\r\n            <p style={{ maxWidth: \"230px\" }}>Ð¡haracter: {character}</p>\r\n        </li>\r\n    )\r\n    )\r\n\r\n    return (\r\n        <>\r\n            <ul style={{ display: \"flex\", flexWrap: \"wrap\", listStyle: \"none\" }}>{elements}</ul>\r\n            {loading && <Loader />}\r\n            {error && <p>Something wrong</p>}\r\n        </>\r\n    )\r\n}\r\n"],"names":["Cast","useState","casts","setCasts","loading","setLoading","error","setError","movieId","useParams","id","includes","Number","slice","length","useEffect","fetchCasts","getCastsById","data","cast","avatarStyle","outline","backgroundColor","width","height","marginTop","textAlign","color","elements","map","name","character","avatar","profile_path","style","borderStyle","src","alt","maxWidth","display","flexWrap","listStyle"],"sourceRoot":""}